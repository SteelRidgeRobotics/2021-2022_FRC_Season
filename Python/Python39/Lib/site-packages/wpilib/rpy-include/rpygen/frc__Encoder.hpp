
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\_impl\include\frc\Encoder.h>

#include <frc/smartdashboard/SendableBuilder.h>
#include <frc/DigitalSource.h>
#include <frc/DigitalGlitchFilter.h>
#include <frc/DMA.h>
#include <frc/DMASample.h>




#include <rpygen/frc__ErrorBase.hpp>
#include <rpygen/frc__CounterBase.hpp>
#include <rpygen/frc__PIDSource.hpp>
#include <rpygen/frc__Sendable.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__Encoder = 
    Pyfrc__ErrorBase<
    Pyfrc__CounterBase<
    Pyfrc__PIDSource<
    Pyfrc__Sendable<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__Encoder : PyBasefrc__Encoder<PyTrampolineBase, CxxBase> {
    using PyBasefrc__Encoder<PyTrampolineBase, CxxBase>::PyBasefrc__Encoder;


using EncodingType = frc::Encoder::EncodingType;
#ifndef RPYGEN_DISABLE_KGet_v
    int Get() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(int), CxxBase, "get", Get,);    }
#endif

#ifndef RPYGEN_DISABLE_Reset_v
    void Reset() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "reset", Reset,);    }
#endif

#ifndef RPYGEN_DISABLE_KGetPeriod_v
    double GetPeriod() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "getPeriod", GetPeriod,);    }
#endif

#ifndef RPYGEN_DISABLE_SetMaxPeriod_d
    void SetMaxPeriod(double maxPeriod) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setMaxPeriod", SetMaxPeriod,maxPeriod);    }
#endif

#ifndef RPYGEN_DISABLE_KGetStopped_v
    bool GetStopped() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "getStopped", GetStopped,);    }
#endif

#ifndef RPYGEN_DISABLE_KGetDirection_v
    bool GetDirection() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "getDirection", GetDirection,);    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "pidGet", PIDGet,);    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(frc::SendableBuilder& builder) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "initSendable", InitSendable,builder);    }
#endif




};

}; // namespace rpygen
