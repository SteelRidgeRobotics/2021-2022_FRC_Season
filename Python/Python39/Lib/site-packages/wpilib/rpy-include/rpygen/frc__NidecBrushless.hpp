
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\_impl\include\frc\NidecBrushless.h>

#include <frc/smartdashboard/SendableBuilder.h>
#include <wpi/SmallString.h>




#include <rpygen/frc__SpeedController.hpp>
#include <rpygen/frc__MotorSafety.hpp>
#include <rpygen/frc__Sendable.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__NidecBrushless = 
    Pyfrc__SpeedController<
    Pyfrc__MotorSafety<
    Pyfrc__Sendable<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__NidecBrushless : PyBasefrc__NidecBrushless<PyTrampolineBase, CxxBase> {
    using PyBasefrc__NidecBrushless<PyTrampolineBase, CxxBase>::PyBasefrc__NidecBrushless;



#ifndef RPYGEN_DISABLE_Set_d
    void Set(double speed) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "set", Set,speed);    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "get", Get,);    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setInverted", SetInverted,isInverted);    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "getInverted", GetInverted,);    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "disable", Disable,);    }
#endif

#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "pidWrite", PIDWrite,output);    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "stopMotor", StopMotor,);    }
#endif

#ifndef RPYGEN_DISABLE_KGetDescription_RTraw_ostream
    void GetDescription(wpi::raw_ostream& desc) const override {
        auto custom_fn = [&](py::function &overload) {
  desc << py::cast<std::string>(overload());
}
;
RPYBUILD_OVERRIDE_CUSTOM_NAME(PYBIND11_TYPE(void), CxxBase, "getDescription", GetDescription,desc);    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(frc::SendableBuilder& builder) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "initSendable", InitSendable,builder);    }
#endif




};

}; // namespace rpygen
