
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\_impl\include\frc\BuiltInAccelerometer.h>

#include <frc/smartdashboard/SendableBuilder.h>


#define RPYGEN_DISABLE_SetRange_TRange


#include <rpygen/frc__ErrorBase.hpp>
#include <rpygen/frc__Accelerometer.hpp>
#include <rpygen/frc__Sendable.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__BuiltInAccelerometer = 
    Pyfrc__ErrorBase<
    Pyfrc__Accelerometer<
    Pyfrc__Sendable<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__BuiltInAccelerometer : PyBasefrc__BuiltInAccelerometer<PyTrampolineBase, CxxBase> {
    using PyBasefrc__BuiltInAccelerometer<PyTrampolineBase, CxxBase>::PyBasefrc__BuiltInAccelerometer;


using Range = frc::Accelerometer::Range;    static constexpr auto kRange_8G = frc::Accelerometer::Range::kRange_8G;

#ifndef RPYGEN_DISABLE_GetX_v
    double GetX() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "getX", GetX,);    }
#endif

#ifndef RPYGEN_DISABLE_GetY_v
    double GetY() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "getY", GetY,);    }
#endif

#ifndef RPYGEN_DISABLE_GetZ_v
    double GetZ() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "getZ", GetZ,);    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(frc::SendableBuilder& builder) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "initSendable", InitSendable,builder);    }
#endif




};

}; // namespace rpygen
