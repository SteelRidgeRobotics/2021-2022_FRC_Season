
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\_impl\include\frc\InterruptableSensorBase.h>





#include <rpygen/frc__ErrorBase.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__InterruptableSensorBase = 
    Pyfrc__ErrorBase<
        PyTrampolineBase
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__InterruptableSensorBase : PyBasefrc__InterruptableSensorBase<PyTrampolineBase, CxxBase> {
    using PyBasefrc__InterruptableSensorBase<PyTrampolineBase, CxxBase>::PyBasefrc__InterruptableSensorBase;


using WaitResult = frc::InterruptableSensorBase::WaitResult;
#ifndef RPYGEN_DISABLE_KGetPortHandleForRouting_v
    HAL_Handle GetPortHandleForRouting() const override {
RPYBUILD_OVERRIDE_PURE_NAME(InterruptableSensorBase,PYBIND11_TYPE(HAL_Handle), CxxBase, "getPortHandleForRouting", GetPortHandleForRouting,);    }
#endif

#ifndef RPYGEN_DISABLE_KGetAnalogTriggerTypeForRouting_v
    AnalogTriggerType GetAnalogTriggerTypeForRouting() const override {
RPYBUILD_OVERRIDE_PURE_NAME(InterruptableSensorBase,PYBIND11_TYPE(AnalogTriggerType), CxxBase, "getAnalogTriggerTypeForRouting", GetAnalogTriggerTypeForRouting,);    }
#endif

#ifndef RPYGEN_DISABLE_RequestInterrupts_Tfunction_void_WaitResult__
    void RequestInterrupts(std::function<void ( WaitResult )> handler) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "requestInterrupts", RequestInterrupts,handler);    }
#endif

#ifndef RPYGEN_DISABLE_RequestInterrupts_v
    void RequestInterrupts() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "requestInterrupts", RequestInterrupts,);    }
#endif

#ifndef RPYGEN_DISABLE_CancelInterrupts_v
    void CancelInterrupts() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "cancelInterrupts", CancelInterrupts,);    }
#endif

#ifndef RPYGEN_DISABLE_WaitForInterrupt_d_b
    InterruptableSensorBase::WaitResult WaitForInterrupt(double timeout, bool ignorePrevious) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(InterruptableSensorBase::WaitResult), CxxBase, "waitForInterrupt", WaitForInterrupt,timeout, ignorePrevious);    }
#endif

#ifndef RPYGEN_DISABLE_EnableInterrupts_v
    void EnableInterrupts() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "enableInterrupts", EnableInterrupts,);    }
#endif

#ifndef RPYGEN_DISABLE_DisableInterrupts_v
    void DisableInterrupts() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "disableInterrupts", DisableInterrupts,);    }
#endif

#ifndef RPYGEN_DISABLE_ReadRisingTimestamp_v
    double ReadRisingTimestamp() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "readRisingTimestamp", ReadRisingTimestamp,);    }
#endif

#ifndef RPYGEN_DISABLE_ReadFallingTimestamp_v
    double ReadFallingTimestamp() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "readFallingTimestamp", ReadFallingTimestamp,);    }
#endif

#ifndef RPYGEN_DISABLE_SetUpSourceEdge_b_b
    void SetUpSourceEdge(bool risingEdge, bool fallingEdge) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setUpSourceEdge", SetUpSourceEdge,risingEdge, fallingEdge);    }
#endif


#ifndef RPYBLD_DISABLE_AllocateInterrupts_b
  #ifndef RPYBLD_UDISABLE_frc__InterruptableSensorBase_AllocateInterrupts
    using frc::InterruptableSensorBase::AllocateInterrupts;
    #define RPYBLD_UDISABLE_frc__InterruptableSensorBase_AllocateInterrupts
  #endif
#endif


};

}; // namespace rpygen
