
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\_impl\include\frc\PWMSpeedController.h>

#include <frc/smartdashboard/SendableBuilder.h>




#include <rpygen/frc__PWM.hpp>
#include <rpygen/frc__SpeedController.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__PWMSpeedController = 
    Pyfrc__PWM<
    Pyfrc__SpeedController<
        PyTrampolineBase
    
    , CxxBase
    >
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__PWMSpeedController : PyBasefrc__PWMSpeedController<PyTrampolineBase, CxxBase> {
    using PyBasefrc__PWMSpeedController<PyTrampolineBase, CxxBase>::PyBasefrc__PWMSpeedController;

#ifdef RPYGEN_ENABLE_frc__PWMSpeedController_PROTECTED_CONSTRUCTORS
    Pyfrc__PWMSpeedController(int channel) :
PyBasefrc__PWMSpeedController<PyTrampolineBase, CxxBase>(channel)
    {}
#endif


#ifndef RPYGEN_DISABLE_Set_d
    void Set(double value) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "set", Set,value);    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "get", Get,);    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setInverted", SetInverted,isInverted);    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "getInverted", GetInverted,);    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "disable", Disable,);    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "stopMotor", StopMotor,);    }
#endif

#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "pidWrite", PIDWrite,output);    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(SendableBuilder& builder) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "_initSendable", InitSendable,builder);    }
#endif




};

}; // namespace rpygen
