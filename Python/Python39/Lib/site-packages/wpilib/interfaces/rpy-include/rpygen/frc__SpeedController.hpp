
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <..\..\_impl\include\frc\SpeedController.h>





#include <rpygen/frc__PIDOutput.hpp>

namespace rpygen {

using namespace frc;


template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
using PyBasefrc__SpeedController = 
    Pyfrc__PIDOutput<
        PyTrampolineBase
    
    , CxxBase
    >
;

template <typename PyTrampolineBase, typename CxxBase = PyTrampolineBase>
struct Pyfrc__SpeedController : PyBasefrc__SpeedController<PyTrampolineBase, CxxBase> {
    using PyBasefrc__SpeedController<PyTrampolineBase, CxxBase>::PyBasefrc__SpeedController;



#ifndef RPYGEN_DISABLE_Set_d
    void Set(double speed) override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(void), CxxBase, "set", Set,speed);    }
#endif

#ifndef RPYGEN_DISABLE_SetVoltage_Tvolt_t
    void SetVoltage(units::volt_t output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setVoltage", SetVoltage,output);    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(double), CxxBase, "get", Get,);    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(void), CxxBase, "setInverted", SetInverted,isInverted);    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(bool), CxxBase, "getInverted", GetInverted,);    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(void), CxxBase, "disable", Disable,);    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
RPYBUILD_OVERRIDE_PURE_NAME(SpeedController,PYBIND11_TYPE(void), CxxBase, "stopMotor", StopMotor,);    }
#endif




};

}; // namespace rpygen
